import os
import time
import asyncio
import pandas as pd
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

TOKEN = os.environ.get("TOKEN")
GLEB_ID = 277837387

VOLUME, WEIGHT, PACKAGING_TYPE, PACKAGING_VOLUME = range(4)
DELIVERY_TYPE, DELIVERY_VOLUME, DELIVERY_WEIGHT = range(4, 7)
user_data = {}
call_tracker = {}

main_menu_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ)")],
     [KeyboardButton("–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞")]],
    resize_keyboard=True,
    one_time_keyboard=False
)

packaging_options = {
    "–°–∫–æ—Ç—á-–º–µ—à–æ–∫": 2,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞": 7,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–∞—è": 10,
    "–ü–∞–ª–ª–µ—Ç–∞": 6,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç": 13,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç —É—Å–∏–ª–µ–Ω–Ω—ã–π": 16,
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —è—â–∏–∫": 18,
    "–ë–∞–±–ª –ø–ª–µ–Ω–∫–∞": 4,
    "–ë—É–º–∞–∂–Ω—ã–µ —É–≥–æ–ª–∫–∏": 6,
    "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏": 0
}

def parse_float(text):
    try:
        return float(text.replace(",", ".").strip())
    except:
        return None

url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSsjTJ6lsQrm1SuD9xWWtD2PNPE3f94d9C_fQ1MO5dVt--Fl4jUsOlupp8qksdb_w/pub?gid=1485895245&single=true&output=csv"
delivery_df = pd.read_csv(url)

def normalize_column_names(df):
    df.columns = [c.strip().lower().replace(" ", "_") for c in df.columns]
    return df

delivery_df = normalize_column_names(delivery_df)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard
    )

async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

async def delivery_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–¢–ù–ü")],
        [KeyboardButton("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã")],
        [KeyboardButton("–û–¥–µ–∂–¥–∞")],
        [KeyboardButton("–û–±—É–≤—å")]
    ]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return DELIVERY_TYPE

cargo_map = {
    "–¢–ù–ü": "CONSUMER_GOODS",
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": "ACCESSOIRES",
    "–û–¥–µ–∂–¥–∞": "CLOTH",
    "–û–±—É–≤—å": "SHOES"
}

async def get_delivery_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice not in cargo_map:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
        return DELIVERY_TYPE

    context.user_data["delivery_type"] = cargo_map[choice]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
    return DELIVERY_VOLUME

async def get_delivery_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    volume = parse_float(text)
    if volume is None or volume <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
        return DELIVERY_VOLUME

    context.user_data["delivery_volume"] = volume
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
    return DELIVERY_WEIGHT

async def get_delivery_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    weight = parse_float(text)
    if weight is None or weight <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return DELIVERY_WEIGHT

    volume = context.user_data.get("delivery_volume")
    cargo_type = context.user_data.get("delivery_type")

    if not volume or not cargo_type:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –æ–±—ä—ë–º–∞ –∏–ª–∏ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    density = weight / volume

    row = delivery_df[
        (delivery_df["category"] == cargo_type) &
        (delivery_df["density_from"] <= density) &
        (delivery_df["density_to"] > density)
    ].head(1)

    if row.empty:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏")
        return ConversationHandler.END

    row = row.iloc[0]
    rate = row["rate"]
    unit = row["unit"]

    if unit == "–º¬≥":
        total = rate * volume
        unit_label = "$/–º¬≥"
    else:
        total = rate * weight
        unit_label = "$/–∫–≥"

    await update.message.reply_text(
        f"–û–±—ä—ë–º: {volume} –º¬≥\n"
        f"–í–µ—Å: {weight} –∫–≥\n"
        f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥\n"
        f"–°—Ç–∞–≤–∫–∞: {rate} {unit_label}\n"
        f"–ò—Ç–æ–≥–æ: {total:.2f} $",
        reply_markup=main_menu_keyboard
    )
    return ConversationHandler.END

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    delivery_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É \\(–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ\\)$"), delivery_start)],
        states={
            DELIVERY_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_delivery_type)],
            DELIVERY_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_delivery_volume)],
            DELIVERY_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_delivery_weight)]
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(delivery_conv)

    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
