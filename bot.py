import os
import time
import asyncio
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
TOKEN = os.environ.get("TOKEN")
GLEB_ID = 277837387

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
VOLUME, WEIGHT, PACKAGING_TYPE, PACKAGING_VOLUME = range(4)
DELIVERY_TYPE, DELIVERY_VOLUME, DELIVERY_WEIGHT = range(4, 7)

user_data = {}
call_tracker = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
TARIFF_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSsjTJ6lsQrm1SuD9xWWtD2PNPE3f94d9C_fQ1MO5dVt--Fl4jUsOlupp8qksdb_w/pub?gid=1485895245&single=true&output=csv"
delivery_df = pd.read_csv(TARIFF_URL)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")],
        [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É")],
        [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ)")],
        [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä")],
        [KeyboardButton("–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞")]
    ], resize_keyboard=True
)

packaging_options = {
    "–°–∫–æ—Ç—á-–º–µ—à–æ–∫": 2, "–û–±—Ä–µ—à–µ—Ç–∫–∞": 7, "–û–±—Ä–µ—à–µ—Ç–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–∞—è": 10,
    "–ü–∞–ª–ª–µ—Ç–∞": 6, "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç": 13, "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç —É—Å–∏–ª–µ–Ω–Ω—ã–π": 16,
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —è—â–∏–∫": 18, "–ë–∞–±–ª –ø–ª–µ–Ω–∫–∞": 4, "–ë—É–º–∞–∂–Ω—ã–µ —É–≥–æ–ª–∫–∏": 6,
    "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏": 0
}

cargo_map = {
    "–¢–ù–ü": "CONSUMER_GOODS",
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": "ACCESSOIRES",
    "–û–¥–µ–∂–¥–∞": "CLOTH",
    "–û–±—É–≤—å": "SHOES"
}

# –£—Ç–∏–ª–∏—Ç—ã

def parse_float(text):
    try:
        return float(text.replace(",", ".").strip())
    except:
        return None

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

# === –ü–õ–û–¢–ù–û–°–¢–¨ ===

async def density_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞? (–≤ –º¬≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10,5)")
    return VOLUME

async def get_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    volume = parse_float(update.message.text)
    if not volume or volume <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10,5)")
        return VOLUME
    context.user_data['volume'] = volume
    await update.message.reply_text("–ö–∞–∫–æ–π –≤–µ—Å –≥—Ä—É–∑–∞? (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
    return WEIGHT

async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weight = parse_float(update.message.text)
    if not weight or weight <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return WEIGHT
    volume = context.user_data['volume']
    density = weight / volume
    keyboard = [[KeyboardButton("–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")], [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]]
    await update.message.reply_text(f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return ConversationHandler.END

# === –£–ü–ê–ö–û–í–ö–ê ===

async def packaging_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(k)] for k in packaging_options.keys()]
    await update.message.reply_text("–ö–∞–∫–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –Ω—É–∂–Ω–∞?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return PACKAGING_TYPE

async def get_packaging_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    option = update.message.text
    if option not in packaging_options:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        return PACKAGING_TYPE
    context.user_data['packaging_rate'] = packaging_options[option]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
    return PACKAGING_VOLUME

async def get_packaging_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    volume = parse_float(update.message.text)
    if not volume or volume <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
        return PACKAGING_VOLUME
    rate = context.user_data['packaging_rate']
    cost = (volume / 0.2) * rate
    await update.message.reply_text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏: {cost:.2f} $", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

# === –¢–†–ê–ù–°–ü–û–†–¢–ù–´–ô –°–ë–û–† ===

async def transport_fee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2,4)")
    return VOLUME

async def calc_transport_fee(update: Update, context: ContextTypes.DEFAULT_TYPE):
    volume = parse_float(update.message.text)
    if not volume or volume <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2,4)")
        return VOLUME
    fee = (volume / 0.2) * 6
    await update.message.reply_text(f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä: {fee:.2f} $", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

# === –î–û–°–¢–ê–í–ö–ê (–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ) ===

async def delivery_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(k)] for k in cargo_map.keys()]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return DELIVERY_TYPE

async def get_delivery_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text not in cargo_map:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞")
        return DELIVERY_TYPE
    context.user_data['delivery_type'] = cargo_map[text]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
    return DELIVERY_VOLUME

async def get_delivery_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    volume = parse_float(update.message.text)
    if not volume or volume <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
        return DELIVERY_VOLUME
    context.user_data['delivery_volume'] = volume
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
    return DELIVERY_WEIGHT

async def get_delivery_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weight = parse_float(update.message.text)
    if not weight or weight <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return DELIVERY_WEIGHT
    volume = context.user_data['delivery_volume']
    cargo_type = context.user_data['delivery_type']
    density = weight / volume

    row = delivery_df[(delivery_df['producttype'] == cargo_type) &
                      (delivery_df['min'] <= density) &
                      (delivery_df['max'] > density)]

    if row.empty:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞–≤–∫—É –ø–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º")
        return ConversationHandler.END

    r = row.iloc[0]
    rate = r['rate']
    unit = "–º¬≥" if density < 100 else "–∫–≥"
    total = rate * volume if unit == "–º¬≥" else rate * weight

    await update.message.reply_text(
        f"–û–±—ä—ë–º: {volume} –º¬≥\n–í–µ—Å: {weight} –∫–≥\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥\n"
        f"–°—Ç–∞–≤–∫–∞: {rate} $/{unit}\n–ò—Ç–æ–≥–æ: {total:.2f} $",
        reply_markup=main_menu_keyboard
    )
    return ConversationHandler.END

# === –ü–û–ó–í–ê–¢–¨ –ì–õ–ï–ë–ê ===

async def call_gleb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    now = time.time()
    if now - call_tracker.get(user_id, 0) < 10:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–≤–∞–ª–∏ –ì–ª–µ–±–∞ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ ‚úã")
        return
    call_tracker[user_id] = now
    name = user.username or user.first_name
    await context.bot.send_message(chat_id=GLEB_ID, text=f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{name} –Ω–∞–∂–∞–ª '–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞'")
    await update.message.reply_text("–ì–ª–µ–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ")

# === –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö ===

async def setup_bot_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand("density", "–£–∑–Ω–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç")
    ])

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞$"), call_gleb))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("density", density_command), MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å$"), density_command), MessageHandler(filters.Regex("^–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç$"), density_command)],
        states={VOLUME: [MessageHandler(filters.TEXT, get_volume)], WEIGHT: [MessageHandler(filters.TEXT, get_weight)]},
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É$"), packaging_command)],
        states={PACKAGING_TYPE: [MessageHandler(filters.TEXT, get_packaging_type)], PACKAGING_VOLUME: [MessageHandler(filters.TEXT, get_packaging_volume)]},
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä$"), transport_fee)],
        states={VOLUME: [MessageHandler(filters.TEXT, calc_transport_fee)]},
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É \(–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ\)$"), delivery_start)],
        states={
            DELIVERY_TYPE: [MessageHandler(filters.TEXT, get_delivery_type)],
            DELIVERY_VOLUME: [MessageHandler(filters.TEXT, get_delivery_volume)],
            DELIVERY_WEIGHT: [MessageHandler(filters.TEXT, get_delivery_weight)]
        },
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    await setup_bot_commands(app)
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
