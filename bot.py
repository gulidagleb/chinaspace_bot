import os
import time
import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

TOKEN = os.environ.get("TOKEN")
GLEB_ID = 277837387

VOLUME, WEIGHT, PACKAGING_TYPE, PACKAGING_VOLUME = range(4)
user_data = {}
call_tracker = {}  # user_id: timestamp

main_menu_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É")],
     [KeyboardButton("–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞")]],
    resize_keyboard=True,
    one_time_keyboard=False
)

packaging_options = {
    "–°–∫–æ—Ç—á-–º–µ—à–æ–∫": 2,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞": 7,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–∞—è": 10,
    "–ü–∞–ª–ª–µ—Ç–∞": 6,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç": 13,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç —É—Å–∏–ª–µ–Ω–Ω—ã–π": 16,
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —è—â–∏–∫": 18,
    "–ë–∞–±–ª –ø–ª–µ–Ω–∫–∞": 4,
    "–ë—É–º–∞–∂–Ω—ã–µ —É–≥–æ–ª–∫–∏": 6,
    "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏": 0
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard
    )

async def density_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞? (–≤ –º¬≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10,5)")
    return VOLUME

async def packaging_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(name)] for name in packaging_options.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–ö–∞–∫–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –Ω—É–∂–Ω–∞?", reply_markup=reply_markup)
    return PACKAGING_TYPE

async def get_packaging_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice not in packaging_options:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        return PACKAGING_TYPE
    context.user_data['packaging_rate'] = packaging_options[choice]
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
    return PACKAGING_VOLUME

async def get_packaging_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        volume = float(text)
        if volume <= 0:
            raise ValueError
        rate = context.user_data['packaging_rate']
        cost = (volume / 0.2) * rate
        await update.message.reply_text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏: {cost:.2f} $", reply_markup=main_menu_keyboard)
        return ConversationHandler.END
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1,2 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤")
        return PACKAGING_VOLUME

async def get_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        volume = float(text)
        if volume <= 0:
            raise ValueError
        context.user_data['volume'] = volume
        await update.message.reply_text("–ö–∞–∫–æ–π –≤–µ—Å –≥—Ä—É–∑–∞? (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ 10,5 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤")
        return VOLUME

async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        weight = float(text)
        if weight <= 0:
            raise ValueError
        volume = context.user_data['volume']
        density = weight / volume

        keyboard = [
            [KeyboardButton("–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")],
            [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

        await update.message.reply_text(
            f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥",
            reply_markup=reply_markup
        )
        return ConversationHandler.END
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 125,5 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤")
        return WEIGHT

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await density_command(update, context)

async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

async def call_gleb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    now = time.time()
    last_call = call_tracker.get(user_id, 0)

    if now - last_call < 10:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–≤–∞–ª–∏ –ì–ª–µ–±–∞ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ ‚úã")
        return

    call_tracker[user_id] = now

    username = user.username or user.first_name
    message_to_gleb = f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–∞–∂–∞–ª '–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞'"
    await context.bot.send_message(chat_id=GLEB_ID, text=message_to_gleb)

    log_entry = f"{time.strftime('%Y-%m-%d %H:%M:%S')} - @{username} ({user_id}) –≤—ã–∑–≤–∞–ª –ì–ª–µ–±–∞"
    print(log_entry)

    await update.message.reply_text("–ì–ª–µ–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

async def setup_bot_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand("density", "–£–∑–Ω–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç")
    ])

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    density_conv = ConversationHandler(
        entry_points=[
            CommandHandler("density", density_command),
            MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å$"), density_command),
            MessageHandler(filters.Regex("^–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç$"), restart)
        ],
        states={
            VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_volume)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)
        ],
        conversation_timeout=300
    )

    packaging_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É$"), packaging_command)
        ],
        states={
            PACKAGING_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_packaging_type)],
            PACKAGING_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_packaging_volume)]
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)
        ],
        conversation_timeout=300
    )

    app.add_handler(density_conv)
    app.add_handler(packaging_conv)
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞$"), call_gleb))

    async def run():
        await setup_bot_commands(app)
        await app.run_polling()

    asyncio.run(run())

if __name__ == "__main__":
    main()
