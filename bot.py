import os
import time
import asyncio
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

TOKEN = os.environ.get("TOKEN")
GLEB_ID = 277837387

VOLUME, WEIGHT, PACKAGING_TYPE, PACKAGING_VOLUME, TRANSPORT_VOLUME, DELIVERY_TYPE, DELIVERY_VOLUME, DELIVERY_WEIGHT = range(8)
user_data = {}
call_tracker = {}  # user_id: timestamp

import requests
from io import StringIO

csv_url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSsjTJ6lsQrm1SuD9xWWtD2PNPE3f94d9C_fQ1MO5dVt--Fl4jUsOlupp8qksdb_w/pub?gid=1485895245&single=true&output=csv"
response = requests.get(csv_url)
delivery_df = pd.read_csv(StringIO(response.text))

main_menu_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ)")],
     [KeyboardButton("–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞")]],
    resize_keyboard=True,
    one_time_keyboard=False
)

packaging_options = {
    "–°–∫–æ—Ç—á-–º–µ—à–æ–∫": 2,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞": 7,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–∞—è": 10,
    "–ü–∞–ª–ª–µ—Ç–∞": 6,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç": 13,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç —É—Å–∏–ª–µ–Ω–Ω—ã–π": 16,
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —è—â–∏–∫": 18,
    "–ë–∞–±–ª –ø–ª–µ–Ω–∫–∞": 4,
    "–ë—É–º–∞–∂–Ω—ã–µ —É–≥–æ–ª–∫–∏": 6,
    "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏": 0
}

delivery_types = {
    "–¢–ù–ü": "CONSUMER_GOODS",
    "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": "ACCESSOIRES",
    "–û–¥–µ–∂–¥–∞": "CLOTH",
    "–û–±—É–≤—å": "SHOES"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard
    )

async def density_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞? (–≤ –º¬≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10,5)")
    return VOLUME

async def delivery_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(name)] for name in delivery_types.keys()]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
    return DELIVERY_TYPE

async def get_delivery_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    selected = update.message.text
    if selected not in delivery_types:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞")
        return DELIVERY_TYPE
    context.user_data['delivery_product'] = delivery_types[selected]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
    return DELIVERY_VOLUME

async def get_delivery_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        volume = float(text)
        if volume <= 0:
            raise ValueError
        context.user_data['delivery_volume'] = volume
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100,5)")
        return DELIVERY_WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2")
        return DELIVERY_VOLUME

async def get_delivery_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        weight = float(text)
        if weight <= 0:
            raise ValueError
        volume = context.user_data['delivery_volume']
        density = weight / volume
        product_type = context.user_data['delivery_product']

        subset = delivery_df[(delivery_df['deliveryType'] == 'FAST_CAR') &
                             (delivery_df['productType'] == product_type)]

        match = subset[(subset['min'] <= density) & (density < subset['max'])].head(1)
        if match.empty:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞–≤–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏")
            return ConversationHandler.END

        rate = float(match.iloc[0]['rate'])

        if density < 100:
            total = rate * volume
            rate_str = f"{rate:.2f} $/–º¬≥"
        else:
            total = rate * weight
            rate_str = f"{rate:.2f} $/–∫–≥"

        await update.message.reply_text(
            f"–û–±—ä—ë–º: {volume:.2f} –º¬≥\n–í–µ—Å: {weight:.2f} –∫–≥\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥\n"
            f"–°—Ç–∞–≤–∫–∞: {rate_str}\n–ò—Ç–æ–≥–æ: {total:.2f} $",
            reply_markup=main_menu_keyboard
        )
        return ConversationHandler.END
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 100,5")
        return DELIVERY_WEIGHT

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º, –≤–∫–ª—é—á–∞—è –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ conv handlers)

if __name__ == "__main__":
    from telegram.ext import ApplicationBuilder

    app = ApplicationBuilder().token(TOKEN).build()

    # ConversationHandlers –∫–∞–∫ —Ä–∞–Ω—å—à–µ + –Ω–æ–≤—ã–π:
    delivery_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É \(–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ\)$"), delivery_start)],
        states={
            DELIVERY_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_delivery_type)],
            DELIVERY_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_delivery_volume)],
            DELIVERY_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_delivery_weight)]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        conversation_timeout=300
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(delivery_conv)
    # (–æ—Å—Ç–∞–ª—å–Ω—ã–µ add_handler –∏ conv –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏)

    asyncio.get_event_loop().create_task(setup_bot_commands(app))
    app.run_polling()
