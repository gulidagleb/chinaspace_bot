import os
import time
import asyncio
import logging
import pandas as pd
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, BotCommand
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

TOKEN = os.environ.get("TOKEN")
GLEB_ID = 277837387

(
    VOLUME, WEIGHT, PACKAGING_TYPE, PACKAGING_VOLUME,
    DELIVERY_TYPE, DELIVERY_VOLUME, DELIVERY_WEIGHT, DELIVERY_CATEGORY
) = range(8)

user_data = {}
call_tracker = {}

main_menu_keyboard = ReplyKeyboardMarkup(
    [
        [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")],
        [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É")],
        [KeyboardButton("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä")],
        [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ)")],
        [KeyboardButton("–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞")]
    ],
    resize_keyboard=True
)

packaging_options = {
    "–°–∫–æ—Ç—á-–º–µ—à–æ–∫": 2,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞": 7,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–∞—è": 10,
    "–ü–∞–ª–ª–µ—Ç–∞": 6,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç": 13,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç —É—Å–∏–ª–µ–Ω–Ω—ã–π": 16,
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —è—â–∏–∫": 18,
    "–ë–∞–±–ª –ø–ª–µ–Ω–∫–∞": 4,
    "–ë—É–º–∞–∂–Ω—ã–µ —É–≥–æ–ª–∫–∏": 6,
    "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏": 0
}

delivery_data_url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSsjTJ6lsQrm1SuD9xWWtD2PNPE3f94d9C_fQ1MO5dVt--Fl4jUsOlupp8qksdb_w/pub?gid=1485895245&single=true&output=csv"

def load_delivery_data():
    try:
        return pd.read_csv(delivery_data_url)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ delivery –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

delivery_df = load_delivery_data()

def parse_number(text):
    try:
        return float(text.replace(",", "."))
    except:
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)

def back_to_menu():
    return [MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), start)]

async def density_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞? (–≤ –º¬≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10,5)")
    return VOLUME

async def get_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    volume = parse_number(update.message.text)
    if volume and volume > 0:
        context.user_data['volume'] = volume
        await update.message.reply_text("–ö–∞–∫–æ–π –≤–µ—Å –≥—Ä—É–∑–∞? (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return WEIGHT
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ 10,5 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
    return VOLUME

async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weight = parse_number(update.message.text)
    volume = context.user_data.get('volume')
    if not volume:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º")
        return VOLUME
    if weight and weight > 0:
        density = weight / volume
        keyboard = ReplyKeyboardMarkup([
            [KeyboardButton("–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")],
            [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
        ], resize_keyboard=True)
        await update.message.reply_text(f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥", reply_markup=keyboard)
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
    return WEIGHT

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await density_command(update, context)

async def call_gleb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    now = time.time()
    if now - call_tracker.get(user.id, 0) < 10:
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–∑–æ–≤–æ–º ‚úã")
        return
    call_tracker[user.id] = now
    await context.bot.send_message(chat_id=GLEB_ID, text=f"üö® @{user.username or user.first_name} –≤—ã–∑—ã–≤–∞–µ—Ç –≤–∞—Å!")
    await update.message.reply_text("–ì–ª–µ–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ")

async def packaging_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(p)] for p in packaging_options]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return PACKAGING_TYPE

async def get_packaging_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice in packaging_options:
        context.user_data['packaging_rate'] = packaging_options[choice]
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º (–≤ –º¬≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
        return PACKAGING_VOLUME
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞")
    return PACKAGING_TYPE

async def get_packaging_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    volume = parse_number(update.message.text)
    if volume and volume > 0:
        cost = (volume / 0.2) * context.user_data['packaging_rate']
        await update.message.reply_text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏: {cost:.2f} $", reply_markup=main_menu_keyboard)
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä—ë–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
    return PACKAGING_VOLUME

async def transport_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º (–≤ –º¬≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1,0)")
    return DELIVERY_VOLUME

async def get_transport_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    volume = parse_number(update.message.text)
    if volume and volume > 0:
        cost = (volume / 0.2) * 6
        await update.message.reply_text(f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä: {cost:.2f} $", reply_markup=main_menu_keyboard)
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0,5)")
    return DELIVERY_VOLUME

async def delivery_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(cat)] for cat in delivery_df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].unique()]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return DELIVERY_CATEGORY

async def get_delivery_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    if category not in delivery_df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'].values:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞")
        return DELIVERY_CATEGORY
    context.user_data['category'] = category
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ (–≤ –º¬≥):", reply_markup=ReplyKeyboardRemove())
    return DELIVERY_VOLUME

async def get_delivery_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    volume = parse_number(update.message.text)
    if volume and volume > 0:
        context.user_data['delivery_volume'] = volume
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ (–≤ –∫–≥):")
        return DELIVERY_WEIGHT
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,0)")
    return DELIVERY_VOLUME

async def get_delivery_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weight = parse_number(update.message.text)
    if weight and weight > 0:
        volume = context.user_data['delivery_volume']
        category = context.user_data['category']
        density = weight / volume

        subset = delivery_df[delivery_df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category]
        row = subset[(subset['–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –æ—Ç'] <= density) & (subset['–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–æ'] < density + 0.01)].head(1)

        if row.empty:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç–∞–≤–∫—É")
            return ConversationHandler.END

        rate = row.iloc[0]['–°—Ç–∞–≤–∫–∞']
        rate_type = row.iloc[0]['–¢–∏–ø —Å—Ç–∞–≤–∫–∏']
        if rate_type == '–º3':
            total = rate * volume
            reply = f"–°—Ç–∞–≤–∫–∞: {rate} $/–º¬≥\n–ò—Ç–æ–≥–æ: {total:.2f} $"
        else:
            total = rate * weight
            reply = f"–°—Ç–∞–≤–∫–∞: {rate} $/–∫–≥\n–ò—Ç–æ–≥–æ: {total:.2f} $"

        await update.message.reply_text(reply, reply_markup=main_menu_keyboard)
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
    return DELIVERY_WEIGHT

async def setup_bot_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("density", "–£–∑–Ω–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")
    ])

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    await setup_bot_commands(app)
    await app.bot.delete_webhook(drop_pending_updates=True)

    app.add_handler(CommandHandler("start", start))

    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("density", density_command), MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å$"), density_command), MessageHandler(filters.Regex("^–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç$"), restart)],
        states={VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_volume)], WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)]},
        fallbacks=back_to_menu(),
        conversation_timeout=300
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É$"), packaging_command)],
        states={PACKAGING_TYPE: [MessageHandler(filters.TEXT, get_packaging_type)], PACKAGING_VOLUME: [MessageHandler(filters.TEXT, get_packaging_volume)]},
        fallbacks=back_to_menu()
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä$"), transport_command)],
        states={DELIVERY_VOLUME: [MessageHandler(filters.TEXT, get_transport_volume)]},
        fallbacks=back_to_menu()
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É \(–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ\)$"), delivery_start)],
        states={
            DELIVERY_CATEGORY: [MessageHandler(filters.TEXT, get_delivery_category)],
            DELIVERY_VOLUME: [MessageHandler(filters.TEXT, get_delivery_volume)],
            DELIVERY_WEIGHT: [MessageHandler(filters.TEXT, get_delivery_weight)]
        },
        fallbacks=back_to_menu()
    ))

    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞$"), call_gleb))

    await app.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError:
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.get_event_loop().run_until_complete(main())
