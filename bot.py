import os
import time
import asyncio
import pandas as pd
from io import StringIO
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

TOKEN = os.environ.get("TOKEN")
GLEB_ID = 277837387

# –®–∞–≥–∏ –¥–ª—è ConversationHandler
VOLUME, WEIGHT, PACKAGING_TYPE, PACKAGING_VOLUME, TRANSPORT_VOLUME, DELIVERY_TYPE, DELIVERY_VOLUME, DELIVERY_WEIGHT = range(8)
user_data = {}
call_tracker = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–≤–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏
csv_url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSsjTJ6lsQrm1SuD9xWWtD2PNPE3f94d9C_fQ1MO5dVt--Fl4jUsOlupp8qksdb_w/pub?gid=1485895245&single=true&output=csv"
df = pd.read_csv(StringIO(requests.get(csv_url).text))

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ)")],
     [KeyboardButton("–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞")]],
    resize_keyboard=True
)

packaging_options = {
    "–°–∫–æ—Ç—á-–º–µ—à–æ–∫": 2,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞": 7,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–∞—è": 10,
    "–ü–∞–ª–ª–µ—Ç–∞": 6,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç": 13,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç —É—Å–∏–ª–µ–Ω–Ω—ã–π": 16,
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —è—â–∏–∫": 18,
    "–ë–∞–±–ª –ø–ª–µ–Ω–∫–∞": 4,
    "–ë—É–º–∞–∂–Ω—ã–µ —É–≥–æ–ª–∫–∏": 6,
    "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏": 0
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)

def parse_float(text):
    try:
        return float(text.replace(",", ".").strip())
    except:
        return None


# ========== –ü–õ–û–¢–ù–û–°–¢–¨ ==========
async def density_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
    return VOLUME

async def get_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        volume = float(update.message.text.replace(",", "."))
        if volume <= 0:
            raise ValueError
        context.user_data['volume'] = volume
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
        return VOLUME

async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text.replace(",", "."))
        if weight <= 0:
            raise ValueError
        volume = context.user_data['volume']
        density = weight / volume
        keyboard = ReplyKeyboardMarkup(
            [[KeyboardButton("–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç"), KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]], resize_keyboard=True
        )
        await update.message.reply_text(f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥", reply_markup=keyboard)
        return ConversationHandler.END
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return WEIGHT

# ========== –£–ü–ê–ö–û–í–ö–ê ==========
async def packaging_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[KeyboardButton(k)] for k in packaging_options.keys()]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏:", reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))
    return PACKAGING_TYPE

async def get_packaging_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice not in packaging_options:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞")
        return PACKAGING_TYPE
    context.user_data['pack_rate'] = packaging_options[choice]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
    return PACKAGING_VOLUME

async def get_packaging_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        volume = float(update.message.text.replace(",", "."))
        rate = context.user_data['pack_rate']
        cost = (volume / 0.2) * rate
        await update.message.reply_text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏: {cost:.2f} $", reply_markup=main_menu_keyboard)
        return ConversationHandler.END
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
        return PACKAGING_VOLUME

# ========== –¢–†–ê–ù–°–ü–û–†–¢–ù–´–ô –°–ë–û–† ==========
async def transport_charge(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
    return TRANSPORT_VOLUME

async def get_transport_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        volume = float(update.message.text.replace(",", "."))
        cost = (volume / 0.2) * 6
        await update.message.reply_text(f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä: {cost:.2f} $", reply_markup=main_menu_keyboard)
        return ConversationHandler.END
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
        return TRANSPORT_VOLUME

# ========== –î–û–°–¢–ê–í–ö–ê (–ë–´–°–¢–†–û–ï –ê–í–¢–û) ==========
async def delivery_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardMarkup([
        [KeyboardButton("–¢–ù–ü"), KeyboardButton("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã")],
        [KeyboardButton("–û–¥–µ–∂–¥–∞"), KeyboardButton("–û–±—É–≤—å")]], resize_keyboard=True))
    return DELIVERY_TYPE

async def get_delivery_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    mapping = {
        "–¢–ù–ü": "CONSUMER_GOODS",
        "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": "ACCESSOIRES",
        "–û–¥–µ–∂–¥–∞": "CLOTH",
        "–û–±—É–≤—å": "SHOES"
    }
    context.user_data['category'] = mapping.get(choice)
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥:", reply_markup=ReplyKeyboardRemove())
    return DELIVERY_VOLUME

async def get_delivery_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['volume'] = float(update.message.text.replace(",", "."))
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥:")
        return DELIVERY_WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
        return DELIVERY_VOLUME

async def get_delivery_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    weight = parse_float(text)
    if weight is None or weight <= 0:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return DELIVERY_WEIGHT

    volume = context.user_data.get("delivery_volume")
    if not volume:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º")
        return DELIVERY_VOLUME

    density = weight / volume
    cargo_type = context.user_data.get("delivery_type")

    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç–∞–≤–∫—É
    row = delivery_df[
        (delivery_df['category'] == cargo_type) &
        (delivery_df['density_from'] <= density) &
        (delivery_df['density_to'] > density)
    ].head(1)

    if row.empty:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç–∞–≤–∫–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏")
        return ConversationHandler.END

    row = row.iloc[0]
    rate = row['rate']
    unit = row['unit']  # '–∫–≥' –∏–ª–∏ '–º¬≥'

    if unit == '–º¬≥':
        total = rate * volume
        unit_label = "$ –∑–∞ –º¬≥"
    else:
        total = rate * weight
        unit_label = "$ –∑–∞ –∫–≥"

    await update.message.reply_text(
        f"–û–±—ä—ë–º: {volume} –º¬≥\n"
        f"–í–µ—Å: {weight} –∫–≥\n"
        f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥\n"
        f"–°—Ç–∞–≤–∫–∞: {rate} {unit_label}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {total:.2f} $",
        reply_markup=main_menu_keyboard
    )
    return ConversationHandler.END


# ========== –ü–†–û–ß–ï–ï ==========
async def call_gleb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    now = time.time()
    if now - call_tracker.get(user.id, 0) < 10:
        await update.message.reply_text("–ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–∑–æ–≤–æ–º")
        return
    call_tracker[user.id] = now
    username = user.username or user.first_name
    await context.bot.send_message(GLEB_ID, f"üö® @{username} –≤—ã–∑–≤–∞–ª –ì–ª–µ–±–∞")
    await update.message.reply_text("–ì–ª–µ–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await density_start(update, context)

async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

async def setup_bot_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∞")
    ])

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å$"), density_start)],
        states={
            VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_volume)],
            WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)]
        },
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É$"), packaging_start)],
        states={
            PACKAGING_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_packaging_type)],
            PACKAGING_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_packaging_volume)]
        },
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä$"), transport_charge)],
        states={
            TRANSPORT_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_transport_volume)]
        },
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É \(–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ\)$"), delivery_start)],
        states={
            DELIVERY_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_delivery_type)],
            DELIVERY_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_delivery_volume)],
            DELIVERY_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_delivery_weight)]
        },
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞$"), call_gleb))
    app.add_handler(MessageHandler(filters.Regex("^–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç$"), restart))
    app.add_handler(MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu))

    await setup_bot_commands(app)
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
