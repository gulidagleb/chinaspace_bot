import os
import time
import logging
import asyncio
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TOKEN")
GLEB_ID = 277837387

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
DELIVERY_TYPE, DELIVERY_VOLUME, DELIVERY_WEIGHT, DELIVERY_PACKAGING = range(4)
user_data = {}
call_tracker = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞–≤–∫–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏
DELIVERY_CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSsjTJ6lsQrm1SuD9xWWtD2PNPE3f94d9C_fQ1MO5dVt--Fl4jUsOlupp8qksdb_w/pub?gid=1485895245&single=true&output=csv"
delivery_df = pd.read_csv(DELIVERY_CSV_URL)

CATEGORY_LABELS = {
    "CONSUMER_GOODS": "–¢–ù–ü",
    "ACCESSOIRES": "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
    "CLOTH": "–û–¥–µ–∂–¥–∞",
    "SHOES": "–û–±—É–≤—å"
}

PACKAGING_OPTIONS = {
    "–°–∫–æ—Ç—á-–º–µ—à–æ–∫": 2,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞": 7,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–∞—è": 10,
    "–ü–∞–ª–ª–µ—Ç–∞": 6,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç": 13,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç —É—Å–∏–ª–µ–Ω–Ω—ã–π": 16,
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —è—â–∏–∫": 18,
    "–ë–∞–±–ª –ø–ª–µ–Ω–∫–∞": 4,
    "–ë—É–º–∞–∂–Ω—ã–µ —É–≥–æ–ª–∫–∏": 6,
    "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏": 0
}

main_menu_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ)")],
     [KeyboardButton("–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞")]],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)

async def call_gleb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    now = time.time()
    last_call = call_tracker.get(user_id, 0)
    if now - last_call < 10:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–≤–∞–ª–∏ –ì–ª–µ–±–∞ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ ‚úã")
        return
    call_tracker[user_id] = now
    username = user.username or user.first_name
    await context.bot.send_message(chat_id=GLEB_ID, text=f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–∞–∂–∞–ª '–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞'")
    await update.message.reply_text("–ì–ª–µ–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ")

async def delivery_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories = delivery_df['productType'].dropna().unique()
    keyboard = [[KeyboardButton(CATEGORY_LABELS.get(cat, cat))] for cat in categories]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return DELIVERY_TYPE

async def delivery_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reverse_labels = {v: k for k, v in CATEGORY_LABELS.items()}
    user_choice = update.message.text.strip()
    product_type = reverse_labels.get(user_choice)
    if not product_type:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
        return DELIVERY_TYPE
    context.user_data['delivery_product_type'] = product_type
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,5)")
    return DELIVERY_VOLUME

async def delivery_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        volume = float(update.message.text.replace(",", "."))
        context.user_data['delivery_volume'] = volume
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 300)")
        return DELIVERY_WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,5)")
        return DELIVERY_VOLUME

async def delivery_packaging(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text.replace(",", "."))
        context.user_data['delivery_weight'] = weight
        keyboard = [[KeyboardButton(name)] for name in PACKAGING_OPTIONS.keys()]
        await update.message.reply_text("–ö–∞–∫ —Ö–æ—Ç–∏—Ç–µ —É–ø–∞–∫–æ–≤–∞—Ç—å?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
        return DELIVERY_PACKAGING
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return DELIVERY_WEIGHT

async def delivery_result(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        packaging = update.message.text
        rate = PACKAGING_OPTIONS.get(packaging)
        if rate is None:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞")
            return DELIVERY_PACKAGING

        volume = context.user_data['delivery_volume']
        weight = context.user_data['delivery_weight']
        density = weight / volume
        product_type = context.user_data['delivery_product_type']

        df_filtered = delivery_df[delivery_df['productType'] == product_type]

        if density <= 100:
            row = df_filtered[df_filtered['min'] < density]
            if row.empty:
                raise ValueError("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç–∞–≤–∫–∏")
            price_per_m3 = float(row.iloc[0]['rate'])
            delivery_cost = volume * price_per_m3
            delivery_text = f"–°—Ç–∞–≤–∫–∞: {price_per_m3:.2f} $/–º¬≥\n–ò—Ç–æ–≥–æ: {delivery_cost:.2f} $"
        else:
            row = df_filtered[(df_filtered['min'] < density) & (density <= df_filtered['max'])]
            if row.empty:
                raise ValueError("–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç–∞–≤–∫–∏")
            price_per_kg = float(row.iloc[0]['rate'])
            delivery_cost = weight * price_per_kg
            delivery_text = f"–°—Ç–∞–≤–∫–∞: {price_per_kg:.2f} $/–∫–≥\n–ò—Ç–æ–≥–æ: {delivery_cost:.2f} $"

        packaging_cost = (volume / 0.2) * rate
        transport_charge = (volume / 0.2) * 6
        total = delivery_cost + packaging_cost + transport_charge

        await update.message.reply_text(
            f"–û–±—ä—ë–º: {volume} –º¬≥\n–í–µ—Å: {weight} –∫–≥\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥\n\n"
            f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_text}\n"
            f"–£–ø–∞–∫–æ–≤–∫–∞: {packaging_cost:.2f} $\n"
            f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —Å–±–æ—Ä: {transport_charge:.2f} $\n\n"
            f"–í—Å–µ–≥–æ –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É 12‚Äì18 –¥–Ω–µ–π: {total:.2f} $",
            reply_markup=main_menu_keyboard
        )
        return ConversationHandler.END

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return DELIVERY_PACKAGING

async def setup_bot_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")
    ])

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É \\(–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ\\)$"), delivery_start)],
        states={
            DELIVERY_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_volume)],
            DELIVERY_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_weight)],
            DELIVERY_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_packaging)],
            DELIVERY_PACKAGING: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_result)]
        },
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), start)],
        conversation_timeout=300
    ))

    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞$"), call_gleb))
    await setup_bot_commands(app)
    await app.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError:
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.get_event_loop().run_until_complete(main())
