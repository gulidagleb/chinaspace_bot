import os
import time
import asyncio
import logging
import pandas as pd
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = os.environ.get("TOKEN")
GLEB_ID = 277837387

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–æ–≤
(
    VOLUME, WEIGHT,
    PACKAGING_TYPE, PACKAGING_VOLUME,
    DELIVERY_CATEGORY, DELIVERY_VOLUME, DELIVERY_WEIGHT
) = range(7)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
call_tracker = {}  # user_id: timestamp

# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_menu_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ)")],
     [KeyboardButton("–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞")]],
    resize_keyboard=True,
    one_time_keyboard=False
)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø–∞–∫–æ–≤–∫–∏
packaging_options = {
    "–°–∫–æ—Ç—á-–º–µ—à–æ–∫": 2,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞": 7,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–∞—è": 10,
    "–ü–∞–ª–ª–µ—Ç–∞": 6,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç": 13,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç —É—Å–∏–ª–µ–Ω–Ω—ã–π": 16,
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —è—â–∏–∫": 18,
    "–ë–∞–±–ª –ø–ª–µ–Ω–∫–∞": 4,
    "–ë—É–º–∞–∂–Ω—ã–µ —É–≥–æ–ª–∫–∏": 6,
    "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏": 0
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å—Ç–∞–≤–∫–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ Google Sheets (CSV)
delivery_df = pd.read_csv("https://docs.google.com/spreadsheets/d/e/2PACX-1vSsjTJ6lsQrm1SuD9xWWtD2PNPE3f94d9C_fQ1MO5dVt--Fl4jUsOlupp8qksdb_w/pub?gid=1485895245&single=true&output=csv")
delivery_df.columns = delivery_df.columns.str.strip()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
async def density_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞? (–≤ –º¬≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10,5)")
    return VOLUME

# –ü–ª–æ—Ç–Ω–æ—Å—Ç—å ‚Äî —à–∞–≥ 1: –æ–±—ä–µ–º
async def get_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        volume = float(text)
        if volume <= 0:
            raise ValueError
        context.user_data['volume'] = volume
        await update.message.reply_text("–ö–∞–∫–æ–π –≤–µ—Å –≥—Ä—É–∑–∞? (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ 10,5 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤")
        return VOLUME

# –ü–ª–æ—Ç–Ω–æ—Å—Ç—å ‚Äî —à–∞–≥ 2: –≤–µ—Å
async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        weight = float(text)
        if weight <= 0:
            raise ValueError
        volume = context.user_data.get('volume')
        if not volume:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º")
            return VOLUME

        density = weight / volume
        keyboard = [[KeyboardButton("–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")], [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]]
        await update.message.reply_text(
            f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return ConversationHandler.END
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 125,5 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤")
        return WEIGHT

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
async def return_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

# –†–∞—Å—á–µ—Ç —É–ø–∞–∫–æ–≤–∫–∏ ‚Äî —à–∞–≥ 1: –≤—ã–±–æ—Ä —É–ø–∞–∫–æ–≤–∫–∏
async def packaging_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(name)] for name in packaging_options.keys()]
    await update.message.reply_text("–ö–∞–∫–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –Ω—É–∂–Ω–∞?", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return PACKAGING_TYPE

# –†–∞—Å—á–µ—Ç —É–ø–∞–∫–æ–≤–∫–∏ ‚Äî —à–∞–≥ 2: –≤–≤–æ–¥ –æ–±—ä–µ–º–∞
async def get_packaging_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    choice = update.message.text
    if choice not in packaging_options:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø–∞–∫–æ–≤–∫—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞")
        return PACKAGING_TYPE
    context.user_data['packaging_rate'] = packaging_options[choice]
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
    return PACKAGING_VOLUME

async def get_packaging_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        volume = float(update.message.text.replace(",", "."))
        if volume <= 0:
            raise ValueError
        rate = context.user_data['packaging_rate']
        cost = (volume / 0.2) * rate
        await update.message.reply_text(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∏: {cost:.2f} $", reply_markup=main_menu_keyboard)
        return ConversationHandler.END
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ 1,2 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ")
        return PACKAGING_VOLUME

# –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ ‚Äî —à–∞–≥ 1: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def delivery_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories = delivery_df['productType'].dropna().unique()
    keyboard = [[KeyboardButton(cat)] for cat in categories]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return DELIVERY_CATEGORY

# –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî —à–∞–≥ 2: –≤–≤–æ–¥ –æ–±—ä–µ–º–∞
async def delivery_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['category'] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥:", reply_markup=ReplyKeyboardRemove())
    return DELIVERY_VOLUME

# –î–æ—Å—Ç–∞–≤–∫–∞ ‚Äî —à–∞–≥ 3: –≤–≤–æ–¥ –≤–µ—Å–∞ –∏ —Ä–∞—Å—á–µ—Ç
async def delivery_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        volume = float(update.message.text.replace(",", "."))
        context.user_data['delivery_volume'] = volume
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥:")
        return DELIVERY_WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
        return DELIVERY_VOLUME

async def delivery_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text.replace(",", "."))
        volume = context.user_data.get('delivery_volume')
        category = context.user_data.get('category')
        if not volume or not category:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return ConversationHandler.END

        density = weight / volume
        df = delivery_df[delivery_df['productType'] == category]

        if density < 100:
            row = df[df['–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –æ—Ç'] <= density]
            row = row[row['–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–æ'] >= density]
            if row.empty:
                await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç–∞–≤–∫–∞.")
                return ConversationHandler.END
            rate = row.iloc[0]['–°—Ç–∞–≤–∫–∞ –∑–∞ –º3']
            total = rate * volume
            await update.message.reply_text(
                f"–û–±—ä—ë–º: {volume} –º¬≥\n–í–µ—Å: {weight} –∫–≥\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥\n"
                f"–°—Ç–∞–≤–∫–∞: {rate} $/–º¬≥\n–ò—Ç–æ–≥–æ: {total:.2f} $"
            )
        else:
            row = df[(df['–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –æ—Ç'] <= density) & (df['–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–æ'] >= density)]
            if row.empty:
                await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç–∞–≤–∫–∞.")
                return ConversationHandler.END
            rate = row.iloc[0]['–°—Ç–∞–≤–∫–∞ –∑–∞ –∫–≥']
            total = rate * weight
            await update.message.reply_text(
                f"–û–±—ä—ë–º: {volume} –º¬≥\n–í–µ—Å: {weight} –∫–≥\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥\n"
                f"–°—Ç–∞–≤–∫–∞: {rate} $/–∫–≥\n–ò—Ç–æ–≥–æ: {total:.2f} $"
            )
        return ConversationHandler.END
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return DELIVERY_WEIGHT

# –í—ã–∑–æ–≤ –ì–ª–µ–±–∞
async def call_gleb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    now = time.time()
    if now - call_tracker.get(user_id, 0) < 10:
        await update.message.reply_text("–í—ã —É–∂–µ –∑–≤–∞–ª–∏ –ì–ª–µ–±–∞ –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 10 —Å–µ–∫—É–Ω–¥ ‚úã")
        return
    call_tracker[user_id] = now
    username = user.username or user.first_name
    message = f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–∞–∂–∞–ª '–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞'"
    await context.bot.send_message(chat_id=GLEB_ID, text=message)
    await update.message.reply_text("–ì–ª–µ–±—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ‚úÖ")

# –ö–æ–º–∞–Ω–¥—ã –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def setup_bot_commands(app):
    await app.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand("density", "–£–∑–Ω–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å"),
        BotCommand("cancel", "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç")
    ])

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å$"), density_command))
    app.add_handler(MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É$"), packaging_command))
    app.add_handler(MessageHandler(filters.Regex("^–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞$"), call_gleb))
    app.add_handler(MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É \(–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ\)$"), delivery_start))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å$"), density_command)],
        states={VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_volume)], WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_weight)]},
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É$"), packaging_command)],
        states={PACKAGING_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_packaging_type)], PACKAGING_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_packaging_volume)]},
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É \(–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ\)$"), delivery_start)],
        states={DELIVERY_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_category)], DELIVERY_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_volume)], DELIVERY_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_weight)]},
        fallbacks=[MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), return_to_menu)],
        conversation_timeout=300
    ))

    await setup_bot_commands(app)
    await app.run_polling()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError:
        import nest_asyncio
        nest_asyncio.apply()
        asyncio.get_event_loop().run_until_complete(main())
