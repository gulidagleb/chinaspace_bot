import os
import time
import asyncio
import pandas as pd
from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton,
    BotCommand, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, filters
)

TOKEN = os.environ.get("TOKEN")
GLEB_ID = 277837387

(
    VOLUME, WEIGHT, PACKAGING_TYPE, PACKAGING_VOLUME,
    DELIVERY_CATEGORY, DELIVERY_VOLUME, DELIVERY_WEIGHT
) = range(7)

user_data = {}
call_tracker = {}

main_menu_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–±–æ—Ä")],
     [KeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É (–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ)")],
     [KeyboardButton("–ü–æ–∑–≤–∞—Ç—å –ì–ª–µ–±–∞")]],
    resize_keyboard=True
)

packaging_options = {
    "–°–∫–æ—Ç—á-–º–µ—à–æ–∫": 2,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞": 7,
    "–û–±—Ä–µ—à–µ—Ç–∫–∞ —É—Å–∏–ª–µ–Ω–Ω–∞—è": 10,
    "–ü–∞–ª–ª–µ—Ç–∞": 6,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç": 13,
    "–ü–∞–ª–ª–µ—Ç–Ω—ã–π –±–æ—Ä—Ç —É—Å–∏–ª–µ–Ω–Ω—ã–π": 16,
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π —è—â–∏–∫": 18,
    "–ë–∞–±–ª –ø–ª–µ–Ω–∫–∞": 4,
    "–ë—É–º–∞–∂–Ω—ã–µ —É–≥–æ–ª–∫–∏": 6,
    "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏": 0
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üëã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard)

# --- –ü–ª–æ—Ç–Ω–æ—Å—Ç—å ---
async def density_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–∞–∫–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã –≥—Ä—É–∑–∞? (–≤ –º¬≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10,5)")
    return VOLUME

async def get_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        volume = float(text)
        if volume <= 0:
            raise ValueError
        context.user_data['volume'] = volume
        await update.message.reply_text("–ö–∞–∫–æ–π –≤–µ—Å –≥—Ä—É–∑–∞? (–≤ –∫–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ 10,5 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤")
        return VOLUME

async def get_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.replace(",", ".").strip()
    try:
        weight = float(text)
        if weight <= 0:
            raise ValueError
        volume = context.user_data['volume']
        density = weight / volume

        keyboard = [[KeyboardButton("–ù–æ–≤—ã–π —Ä–∞—Å—á—ë—Ç")], [KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(f"–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥", reply_markup=reply_markup)
        return ConversationHandler.END
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 125,5 ‚Äî –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤")
        return WEIGHT

# --- –î–æ—Å—Ç–∞–≤–∫–∞ ---
async def delivery_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    keyboard = [[KeyboardButton("–¢–ù–ü")], [KeyboardButton("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã")], [KeyboardButton("–û–¥–µ–∂–¥–∞")], [KeyboardButton("–û–±—É–≤—å")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞:", reply_markup=reply_markup)
    return DELIVERY_CATEGORY

async def delivery_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    mapping = {
        "–¢–ù–ü": "CONSUMER_GOODS",
        "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã": "ACCESSOIRES",
        "–û–¥–µ–∂–¥–∞": "CLOTH",
        "–û–±—É–≤—å": "SHOES"
    }
    if text not in mapping:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞")
        return DELIVERY_CATEGORY
    context.user_data['delivery_category'] = mapping[text]
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)", reply_markup=ReplyKeyboardRemove())
    return DELIVERY_VOLUME

async def delivery_volume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        volume = float(update.message.text.replace(",", "."))
        if volume <= 0:
            raise ValueError
        context.user_data['delivery_volume'] = volume
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return DELIVERY_WEIGHT
    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,2)")
        return DELIVERY_VOLUME

async def delivery_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        weight = float(update.message.text.replace(",", "."))
        if weight <= 0:
            raise ValueError
        category = context.user_data['delivery_category']
        volume = context.user_data['delivery_volume']
        density = weight / volume

        url = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSsjTJ6lsQrm1SuD9xWWtD2PNPE3f94d9C_fQ1MO5dVt--Fl4jUsOlupp8qksdb_w/pub?gid=1485895245&single=true&output=csv"
        df = pd.read_csv(url)

        match_row = df[
            (df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category) &
            (df['–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –æ—Ç'] <= density) &
            (df['–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–æ'] > density)
        ]

        if match_row.empty and density == 100:
            match_row = df[(df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == category) & (df['–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –æ—Ç'] <= 100) & (df['–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –¥–æ'] > 100)]

        if match_row.empty:
            await update.message.reply_text("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞–≤–∫—É –¥–ª—è —Ç–∞–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞")
            return ConversationHandler.END

        rate = match_row.iloc[0]['–°—Ç–∞–≤–∫–∞']
        is_volume_based = density < 100
        if is_volume_based:
            total = volume * rate
            rate_str = f"{rate:.0f} $/–º¬≥"
        else:
            total = weight * rate
            rate_str = f"{rate:.2f} $/–∫–≥"

        await update.message.reply_text(
            f"–û–±—ä—ë–º: {volume} –º¬≥\n–í–µ—Å: {weight} –∫–≥\n–ü–ª–æ—Ç–Ω–æ—Å—Ç—å: {density:.2f} –∫–≥/–º¬≥\n"
            f"–°—Ç–∞–≤–∫–∞: {rate_str}\n–ò—Ç–æ–≥–æ: {total:.2f} $",
            reply_markup=main_menu_keyboard
        )
        return ConversationHandler.END

    except:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 125,5)")
        return DELIVERY_WEIGHT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–∞—Å—á—ë—Ç –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=main_menu_keyboard)
    return ConversationHandler.END

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    delivery_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É \(–±—ã—Å—Ç—Ä–æ–µ –∞–≤—Ç–æ\)$"), delivery_start)],
        states={
            DELIVERY_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_category)],
            DELIVERY_VOLUME: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_volume)],
            DELIVERY_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, delivery_weight)]
        },
        fallbacks=[CommandHandler("cancel", cancel), MessageHandler(filters.Regex("^–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é$"), start)],
        conversation_timeout=300
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(delivery_conv)
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.run(main())
